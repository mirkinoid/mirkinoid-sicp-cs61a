#lang planet dyoo/simply-scheme:2
(define tolerance 0.00001)
(define (fixed-point f first-guess)
  (define (close-enough? v1 v2)
    (< (abs (- v1 v2))
       tolerance))
  (define (try guess)
    (let ((next (f guess)))
      (if (close-enough? guess next)
          next
          (try next))))
  (try first-guess))

(define (average x y)
  (/ (+ x y) 2))

(define (average-damp f)
  (lambda (x) (average x (f x))))

(define (sqrt-test x)
  (fixed-point (average-damp (lambda (y) (/ x y))) 1.0))

(define (cube-root x)
  (fixed-point (average-damp (lambda (y) (/ x (* y y)))) 1.0))

;;; Newton's method
(define dx 0.0001)
(define (deriv g)
  (lambda (x) (/ (- (g (+ x dx)) (g x)) dx)))

(define (newton-transform g)
  (lambda (x) (- x (/ (g x) ((deriv g) x)))))
(define (newtons-method g guess)
  (fixed-point (newton-transform g) guess))

(define (sqrt-n x)
  (newtons-method (lambda (y) (- (* y y) x)) 1.0))

;;;
(define (square x) (* x x))
(define (inc x) (+ x 1))
;;; 1.40
(define (cubic a b c)
  (lambda (x) (+ (* x x x) (* a (* x x)) (* b x) c)))

;;; 1.41
(define (double f)
  (lambda (x) (f (f x))))

;;; 1.42
(define (compose f g)
  (lambda (x) (f (g x))))

;;; 1.43
;(define (repeated f n)
;  (lambda (x)
;    (define (repeat f n a)
;      (if (< 1 n)
;          (f a)
;          (repeat f (- n 1) (f a))))
;    (repeat f n (f x))))


(define (repeated f n)
  (if (< n 2)
      f
      (compose f (repeated f (- n 1)))))

;;; 1.46
(define (improve guess x)
  (average guess (/ x guess)))
(define (good-enough? guess x)
  (< (abs (- (square guess) x)) 0.001))

(define (iterative-improve t i)
  (lambda (x)
    (define (improve t i g r)
      (if (t g r)
          g
          (improve t i (i g r) r)))
    (improve t i 1.0 x)))

;;; every
(define (my-every f s)
  (cond ((empty? s) (se '()))
        ((empty? (bf s)) (se (f (first s))))
        (else (se (f (first s)) (my-every f (bf s))))))

;;; 1.35
(define (fi-transform x)
  (+ 1 (/ 1 x)))

(define (fi-transform-damp f)
  (lambda (x) (fi-transform (f x))))
